// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TodoApi.Models;

#nullable disable

namespace TodoApi.Migrations
{
    [DbContext(typeof(MarketplaceContext))]
    [Migration("20250115215431_seedData")]
    partial class seedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PrivateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrivateId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Private", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("City")
                        .HasColumnType("integer");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Telegram")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Privates");
                });

            modelBuilder.Entity("PrivateSubway", b =>
                {
                    b.Property<int>("PrivateId")
                        .HasColumnType("integer");

                    b.Property<int>("SubwayId")
                        .HasColumnType("integer");

                    b.HasKey("PrivateId", "SubwayId");

                    b.HasIndex("SubwayId");

                    b.ToTable("PrivateSubway");
                });

            modelBuilder.Entity("PrivateTag", b =>
                {
                    b.Property<int>("PrivateId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("PrivateId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PrivateTags");
                });

            modelBuilder.Entity("Subway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subways");
                });

            modelBuilder.Entity("Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TodoApi.Models.TodoItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Secret")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TodoItems");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsComplete = false,
                            Name = "Learn EF Core"
                        },
                        new
                        {
                            Id = 2L,
                            IsComplete = false,
                            Name = "Write migrations"
                        },
                        new
                        {
                            Id = 3L,
                            IsComplete = false,
                            Name = "Deploy to production"
                        });
                });

            modelBuilder.Entity("Photo", b =>
                {
                    b.HasOne("Private", "Private")
                        .WithMany("Photos")
                        .HasForeignKey("PrivateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Private");
                });

            modelBuilder.Entity("PrivateSubway", b =>
                {
                    b.HasOne("Private", "Private")
                        .WithMany("Subways")
                        .HasForeignKey("PrivateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Subway", "Subway")
                        .WithMany("Privates")
                        .HasForeignKey("SubwayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Private");

                    b.Navigation("Subway");
                });

            modelBuilder.Entity("PrivateTag", b =>
                {
                    b.HasOne("Private", "Private")
                        .WithMany("Tags")
                        .HasForeignKey("PrivateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tag", "Tag")
                        .WithMany("Privates")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Private");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Private", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Subways");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Subway", b =>
                {
                    b.Navigation("Privates");
                });

            modelBuilder.Entity("Tag", b =>
                {
                    b.Navigation("Privates");
                });
#pragma warning restore 612, 618
        }
    }
}
